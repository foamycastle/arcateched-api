generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attachments {
  id              String                 @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  label           String?                @db.VarChar(64)
  path            String?
  type            attType?
  timestamp       String?                @db.Uuid
  timestampObject timestamp?             @relation(fields: [timestamp], references: [id])
  machines        machine_data[]         @relation("machine_attachments")
  comments        comments[]             @relation("attachment_comments")
  contacts        contacts[]             @relation("contacts_attachments")
  issues          issues[]               @relation("issues_attachments")
  machine_zones   machine_zones[]        @relation("machine_zone_attachments")
  keys            keys[]                 @relation("keys_attachments")
  todo            todo[]                 @relation("todo_attachments")
  users           users[]                @relation("user_attachments")
  poItems         purchase_order_items[] @relation("poItems_attachments")
  purchase_orders purchase_orders[]      @relation("po_attachments")
  replaced_parts  replaced_parts[]       @relation("replaced_parts_attachments")
}

model comments {
  id              String                 @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  timestamp       String                 @db.Uuid
  content         String?
  userRole        user_role?
  machines        machine_data[]         @relation("machine_data_comments")
  attachments     attachments[]          @relation("attachment_comments")
  contacts        contacts[]             @relation("contacts_comments")
  issues          issues[]               @relation("issues_comments")
  keys            keys[]                 @relation("keys_comments")
  machine_zones   machine_zones[]        @relation("machine_zones_comments")
  todo            todo[]                 @relation("todo_comments")
  users           users[]                @relation("users_comments")
  poItems         purchase_order_items[] @relation("poItems_comments")
  purchase_orders purchase_orders[]      @relation("po_comments")
  replaced_parts  replaced_parts[]       @relation("replaced_parts_comments")
  timestampObject timestamp              @relation(fields: [timestamp], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contacts {
  id              String               @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String               @db.VarChar(64)
  addresses       contacts_addresses[]
  phones          contacts_phone[]
  interet         contacts_internet[]
  type            contactType[]
  supplies        String[]             @db.VarChar(64)
  timestamp       String?              @db.Uuid
  timestampObject timestamp?           @relation(fields: [timestamp], references: [id])
  attachments     attachments[]        @relation("contacts_attachments")
  comments        comments[]           @relation("contacts_comments")
  machines        machine_data[]
}

model contacts_addresses {
  streetNumber   String?    @db.VarChar(10)
  streetAddress1 String?    @db.VarChar(128)
  streetAddress2 String?    @db.VarChar(128)
  streetUnit     String?    @db.VarChar(10)
  postalcode     String?    @db.VarChar(10)
  territory      state?
  country        countries?
  label          String?    @db.VarChar(64)
  id             String     @id(map: "contactsAddress_pkey") @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  contactId      String?    @db.Uuid
  city           String?    @db.VarChar(64)
  name           String?    @db.VarChar(48)
  parent         contacts?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model contacts_internet {
  website   String[]  @db.VarChar(255)
  twitter   String?   @db.VarChar(32)
  facebook  String?   @db.VarChar(128)
  youtube   String?   @db.VarChar(32)
  insta     String?   @db.VarChar(32)
  id        String    @id(map: "contactsInternet_pkey") @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  email     String[]  @db.VarChar(128)
  contactId String?   @db.Uuid
  parent    contacts? @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model contacts_phone {
  countryCode   Int?
  areaCode      Int?
  regionCode    Int?
  extCode1      Int?
  extCode2      Int?
  lineExtension Int?
  label         String?   @db.VarChar(32)
  id            String    @id(map: "contactsPhone_pkey") @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  contactId     String?   @db.Uuid
  name          String?   @db.VarChar(48)
  parent        contacts? @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model issues {
  id              String                @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  machine         String?               @db.Uuid
  label           String?               @db.VarChar(64)
  description     String?
  diagnosis       String?
  expectedAction  String?
  postResult      String?
  timestamp       String                @db.Uuid
  tag             String?               @db.Uuid
  issue_tags      issues_problem_tags[] @relation("issue_problem_tags")
  attachments     attachments[]         @relation("issues_attachments")
  comments        comments[]            @relation("issues_comments")
  timestampObject timestamp             @relation(fields: [timestamp], references: [id])
}

model issues_problem_tags {
  id     String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  label  String?  @db.VarChar(32)
  color  BigInt?
  issues issues[] @relation("issue_problem_tags")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model keys {
  id                  String         @id(map: "pkey_KeysID") @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name                String         @db.VarChar(32)
  label               String?        @db.VarChar(32)
  markings            String[]       @db.VarChar
  timestamp           String?        @db.Uuid
  timestampObject     timestamp?     @relation(fields: [timestamp], references: [id])
  machine_service_key machine_data[] @relation("machine_service_keys")
  machine_cabinet_key machine_data[] @relation("machine_cabinet_keys")
  comments            comments[]     @relation("keys_comments")
  attachments         attachments[]  @relation("keys_attachments")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model machine_data {
  id              String         @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String         @db.VarChar(64)
  modelNumber     String?        @db.VarChar(32)
  serialNumber    String         @unique(map: "gameSerial__u") @db.VarChar(32)
  dateOfMfg       DateTime?      @db.Date
  dateEnter       DateTime?      @db.Date
  dateExit        DateTime?      @db.Date
  cKey            String?        @map("cabinetKey") @db.Uuid
  sKey            String?        @map("serviceKey") @db.Uuid
  playerCount     Int?           @db.SmallInt
  gameType        gameType[]
  gameZone        String?        @db.Uuid
  occupied        Float?
  timestamp       String         @db.Uuid
  mfgUUID         String?        @db.Uuid
  opState         opState?
  manufacturer    contacts?      @relation(fields: [mfgUUID], references: [id])
  serviceKey      keys?          @relation("machine_service_keys", fields: [sKey], references: [id])
  cabinetKey      keys?          @relation("machine_cabinet_keys", fields: [cKey], references: [id])
  zone            machine_zones? @relation(fields: [gameZone], references: [id])
  timestampObject timestamp      @relation(fields: [timestamp], references: [id])
  attachments     attachments[]  @relation("machine_attachments")
  comments        comments[]     @relation("machine_data_comments")

  @@index([mfgUUID], map: "fki_manufacturerID")
  @@index([timestamp], map: "fki_timestamp")
}

model machine_zones {
  id              String         @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  label           String         @db.VarChar(32)
  description     String?        @db.VarChar(255)
  floorArea       Float?
  timestamp       String         @db.Uuid
  timestampObject timestamp      @relation(fields: [timestamp], references: [id])
  attachments     attachments[]  @relation("machine_zone_attachments")
  comments        comments[]     @relation("machine_zones_comments")
  machine_data    machine_data[]
}

model timestamp {
  id              String            @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt       DateTime?         @db.Timestamp(6)
  modifiedAt      DateTime?         @db.Timestamp(6)
  openedAt        DateTime?         @db.Timestamp(6)
  assignedAt      DateTime?         @db.Timestamp(6)
  resolvedAt      DateTime?         @db.Timestamp(6)
  completedAt     DateTime?         @db.Timestamp(6)
  removedAt       DateTime?         @db.Timestamp(6)
  enteredAt       DateTime?         @db.Timestamp(6)
  lastLogin       DateTime?         @db.Timestamp(6)
  goalBegin       DateTime?         @db.Timestamp(6)
  goalExpCom      DateTime?         @db.Timestamp(6)
  replaceAt       DateTime?         @db.Timestamp(6)
  lastAccess      DateTime?         @db.Timestamp(6)
  resolvedBy      String?           @db.Uuid
  createdBy       String?           @db.Uuid
  modifiedBy      String?           @db.Uuid
  openedBy        String?           @db.Uuid
  assignedBy      String?           @db.Uuid
  completedBy     String?           @db.Uuid
  dateMfg         DateTime?         @db.Date
  removedBy       String?           @db.Uuid
  enteredBy       String?           @db.Uuid
  replacedBy      String?           @db.Uuid
  lastAccessBy    String?           @db.Uuid
  attachments     attachments[]
  comments        comments[]
  contacts        contacts[]
  keys            keys[]
  machines        machine_data[]
  zones           machine_zones[]
  issues          issues[]
  todo            todo[]
  users           users[]
  purchase_orders purchase_orders[]
  replaced_parts  replaced_parts[]
}

model todo {
  id              String        @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  isCompleted     Boolean       @default(false)
  userLevel       user_role?
  assignedTo      String?       @db.Uuid
  label           String?       @db.VarChar(64)
  description     String?
  priority        Priority?
  disposition     String?
  relatedMachine  String?       @db.Uuid
  relatedIssue    String?       @db.Uuid
  attachments     attachments[] @relation("todo_attachments")
  timestamp       String        @db.Uuid
  timestampObject timestamp     @relation(fields: [timestamp], references: [id])
  comments        comments[]    @relation("todo_comments")
}

model users {
  id              String        @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  username        String        @db.VarChar(16)
  displayName     String        @db.VarChar(96)
  password        Bytes
  isLoggedIn      Boolean?
  userRole        user_role?
  userContact     String?       @db.Uuid
  timestamp       String?       @db.Uuid
  attachments     attachments[] @relation("user_attachments")
  timestampObject timestamp?    @relation(fields: [timestamp], references: [id])
  comments        comments[]    @relation("users_comments")
}

model purchase_order_items {
  id             String          @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  po_id          String          @db.Uuid
  recv           Boolean?
  partNumber     String?         @db.VarChar(32)
  description    String?         @db.VarChar(255)
  qty            Int?
  unitPrice      Int?
  purpose        String?         @db.VarChar(255)
  relatedMachine String?         @db.Uuid
  relatedIssue   String?         @db.Uuid
  relatedTodo    String?         @db.Uuid
  attachments    attachments[]   @relation("poItems_attachments")
  comments       comments[]      @relation("poItems_comments")
  parent         purchase_orders @relation(fields: [po_id], references: [id])
}

model purchase_orders {
  id                String                 @unique(map: "purchase_order_id") @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  number            String                 @db.VarChar(10)
  timestamp         String                 @db.Uuid
  recv              Boolean                @default(false)
  source            String?                @db.Uuid
  supplier_order_no String?                @db.VarChar(32)
  purchaseMethod    String?                @db.Uuid
  shippingCost      BigInt?
  salesTax          BigInt?
  shipping_carrier  String?                @db.Uuid
  carrier_tracking  String?                @db.VarChar(48)
  timestampObject   timestamp              @relation(fields: [timestamp], references: [id])
  attachments       attachments[]          @relation("po_attachments")
  comments          comments[]             @relation("po_comments")
  items             purchase_order_items[]

  @@id([id])
}

model replaced_parts {
  id              String        @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  name            String?       @db.VarChar(64)
  number          String?       @db.VarChar(64)
  relatedMachine  String?       @db.Uuid
  relatedIssue    String?       @db.Uuid
  relatedTodo     String?       @db.Uuid
  timestamp       String        @db.Uuid
  attachments     attachments[] @relation("replaced_parts_attachments")
  timestampObject timestamp     @relation(fields: [timestamp], references: [id])
  comment         comments[]    @relation("replaced_parts_comments")
}

enum Priority {
  Lowest
  Low
  Moderate
  ASAP
  Critical
}

enum StatusTags {
  Pending
  Open
  Resolved
  Deferred
}

enum attType {
  Machine_Image    @map("Machine Image")
  Machine_Manual   @map("Machine Manual")
  Key_Front        @map("Key Front")
  Key_Back         @map("Key Back")
  Contact_Relation @map("Contact Relation")
  User_Relation    @map("User Relation")
}

enum contactType {
  Manufacturer
  Vendor
  Tech_Support   @map("Tech Support")
  Sales_Rep      @map("Sales Rep")
  Distributor
  Contractor
  Team_Member    @map("Team Member")
  Administrator
  Human_Resource @map("Human Resource")
}

enum countries {
  Afghanistan
  Albania
  Algeria
  Andorra
  Angola
  Antigua___Deps                 @map("Antigua & Deps")
  Argentina
  Armenia
  Australia
  Austria
  Azerbaijan
  Bahamas
  Bahrain
  Bangladesh
  Barbados
  Belarus
  Belgium
  Belize
  Benin
  Bermuda
  Bhutan
  Bolivia
  Bosnia_Herzegovina             @map("Bosnia Herzegovina")
  Botswana
  Brazil
  Brunei
  Bulgaria
  Burkina
  Burundi
  Cambodia
  Cameroon
  Canada
  Cape_Verde                     @map("Cape Verde")
  Central_African_Rep            @map("Central African Rep")
  Chad
  Chile
  China
  Colombia
  Comoros
  Congo
  Congo__Democratic_Rep_         @map("Congo (Democratic Rep)")
  Costa_Rica                     @map("Costa Rica")
  Croatia
  Cuba
  Cyprus
  Czech_Republic                 @map("Czech Republic")
  Denmark
  Djibouti
  Dominica
  Dominican_Republic             @map("Dominican Republic")
  East_Timor                     @map("East Timor")
  Ecuador
  Egypt
  El_Salvador                    @map("El Salvador")
  Equatorial_Guinea              @map("Equatorial Guinea")
  Eritrea
  Estonia
  Eswatini
  Ethiopia
  Fiji
  Finland
  France
  Gabon
  Gambia
  Georgia
  Germany
  Ghana
  Greece
  Grenada
  Guatemala
  Guinea
  Guinea_Bissau                  @map("Guinea-Bissau")
  Guyana
  Haiti
  Honduras
  Hungary
  Iceland
  India
  Indonesia
  Iran
  Iraq
  Ireland__Republic_             @map("Ireland (Republic)")
  Israel
  Italy
  Ivory_Coast                    @map("Ivory Coast")
  Jamaica
  Japan
  Jordan
  Kazakhstan
  Kenya
  Kiribati
  Korea_North                    @map("Korea North")
  Korea_South                    @map("Korea South")
  Kosovo
  Kuwait
  Kyrgyzstan
  Laos
  Latvia
  Lebanon
  Lesotho
  Liberia
  Libya
  Liechtenstein
  Lithuania
  Luxembourg
  Macedonia
  Madagascar
  Malawi
  Malaysia
  Maldives
  Mali
  Malta
  Marshall_Islands               @map("Marshall Islands")
  Mauritania
  Mauritius
  Mexico
  Micronesia
  Moldova
  Monaco
  Mongolia
  Montenegro
  Morocco
  Mozambique
  Myanmar
  Namibia
  Nauru
  Nepal
  Netherlands
  New_Zealand                    @map("New Zealand")
  Nicaragua
  Niger
  Nigeria
  Norway
  Oman
  Pakistan
  Palau
  Palestine
  Panama
  Papua_New_Guinea               @map("Papua New Guinea")
  Paraguay
  Peru
  Philippines
  Poland
  Portugal
  Qatar
  Romania
  Russian_Federation             @map("Russian Federation")
  Rwanda
  St_Kitts___Nevis               @map("St Kitts & Nevis")
  St_Lucia                       @map("St Lucia")
  Saint_Vincent___the_Grenadines @map("Saint Vincent & the Grenadines")
  Samoa
  San_Marino                     @map("San Marino")
  Sao_Tome___Principe            @map("Sao Tome & Principe")
  Saudi_Arabia                   @map("Saudi Arabia")
  Senegal
  Serbia
  Seychelles
  Sierra_Leone                   @map("Sierra Leone")
  Singapore
  Slovakia
  Slovenia
  Solomon_Islands                @map("Solomon Islands")
  Somalia
  South_Africa                   @map("South Africa")
  South_Sudan                    @map("South Sudan")
  Spain
  Sri_Lanka                      @map("Sri Lanka")
  Sudan
  Suriname
  Sweden
  Switzerland
  Syria
  Taiwan
  Tajikistan
  Tanzania
  Thailand
  Togo
  Tonga
  Trinidad___Tobago              @map("Trinidad & Tobago")
  Tunisia
  Turkey
  Turkmenistan
  Tuvalu
  Uganda
  Ukraine
  United_Arab_Emirates           @map("United Arab Emirates")
  United_Kingdom                 @map("United Kingdom")
  United_States                  @map("United States")
  Uruguay
  Uzbekistan
  Vanuatu
  Vatican_City                   @map("Vatican City")
  Venezuela
  Vietnam
  Yemen
  Zambia
  Zimbabwe
}

enum gameType {
  Video
  Redemption
  Merch
  Crane
  Ticket
  Pusher
  Skill
}

enum opState {
  Up
  Down
  Repair
  Off_Floor @map("Off Floor")
  Sold
}

enum state {
  DE
  PA
  NJ
  GA
  CT
  MA
  MD
  SC
  NH
  VA
  NY
  NC
  RI
  VT
  KY
  TN
  OH
  LA
  IN
  MS
  IL
  AL
  ME
  MO
  AR
  MI
  FL
  TX
  IA
  WI
  CA
  MN
  OR
  KS
  WV
  NV
  NB
  CO
  ND
  SD
  MT
  WA
  ID
  WY
  UT
  OK
  NM
  AZ
  AK
  HI
}

enum user_role {
  ADMIN
  SENIOR
  JUNIOR
  ATTENDANT
}
